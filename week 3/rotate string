class Solution {
public:
    bool rotateString(string s, string goal) {
          if (s.size() != goal.size()) {
            return false;
        }
        string p=s+s;
        return pattern(p,goal);
    }
    bool pattern(string p,string patt){
        vector<int>pref(patt.length(),0);
        int n=p.length(),m=patt.length();
        prefix(patt,pref);
        int i=0,j=0;
        while(i<n){
            if(p[i]==patt[j]){
                i++;
                j++;
                if(j==m){
                return true;
            }
            
            }
            else{
                if(j!=0){
                    j=pref[j-1];
                }
                else{
                    i++;
                }
            }
            
        }
    return false;
    }
    void prefix(string patt,vector<int>& pref){
        int len=0,i=1;
        pref[0]=0;
        while(i<patt.length()){
            if(patt[i]==patt[len]){
                len++;
                pref[i]=len;
                i++;
            }
            else{
                if(len!=0){
                   len=pref[len-1];
                }
                else{
                    pref[i]=0;
                    i++;
                }
            }
        }
    }
};
