void quickSort(vector<int>& arr, int low, int high) {
        if(low<high){
            int l=partition(arr,low,high);
            quickSort(arr,low,l-1);
            quickSort(arr,l+1,high);
        }
    }

  public:
    // Function that takes last element as pivot, places the pivot element at
    // its correct position in sorted array, and places all smaller elements
    // to left of pivot and all greater elements to right of pivot.
    int partition(vector<int>& arr, int low, int high) {
        int pivot=arr[high];
        int i=low-1;
        for(int j=low;j<=high-1;j++){
            if(arr[j]<=pivot){
                i++;
                swap(&arr[i],&arr[j]);
            }
        }
        swap(&arr[i+1],&arr[high]);
        return i+1;
    }
    public:void swap(int *a,int *b){
        int t=*a;
        *a=*b;
        *b=t;
    }
