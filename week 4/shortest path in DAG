//toposrt using dfs 
  private:void dfs(vector<vector<pair<int,int>>>&adj,vector<bool>&visited,stack<int>&st,int i){
        visited[i]=true;
        for(auto &v:adj[i]){
            if(!visited[v.first]){
                dfs(adj,visited,st,v.first);
            }
        }
        st.push(i);
    }
  public:
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
       
       vector<int>ans(V,1e9);
     
      vector<vector<pair<int, int>>> adj(V);
      for(int i=0;i<E;i++){
          adj[edges[i][0]].push_back(make_pair(edges[i][1],edges[i][2]));
      }
      vector<bool>visited(V,false);
      stack<int>st;
      for(int i=0;i<V;i++){
          if(!visited[i]){
              dfs(adj,visited,st,i);
          }
      }
      ans[0]=0;
      while(!st.empty()){
          int u=st.top();
          st.pop();
          for(auto &p:adj[u]){
              int vertex=p.first;
              int w=p.second;
              if(ans[vertex]>w+ans[u]){
               ans[vertex]=w+ans[u] ;  
              }
          }
      }
      
      for(auto &i:ans){
          if(i==1e9)
          i=-1;
          
      }
      
       return ans;
    }
