//sumof subaraays (not subset)
 public:
    int perfectSum(vector<int>& arr, int target) {
       int count=0,sum=0;
       helper(arr,target,&count,0,sum);
       return count;
    }
    void helper(vector<int>&arr,int target,int *count,int i,int sum){
        if(i==arr.size()){
            return;
        }
        if(sum==target){
            (*count)++;
            sum=0;
          helper(arr,target,count,i+1,sum+arr[i]);
            
        }
        else if(sum>target){
            sum=0;
           helper(arr,target,count,i+1,sum+arr[i]);
        }
        else
         helper(arr,target,count,i+1,sum+arr[i]);
        
    }

//actual answer
public:
    int perfectSum(vector<int>& arr, int target) {
        int n=arr.size();
         vector<vector<int>> memo(n + 1, vector<int>(target + 1, -1));
       return helper(arr,target,0,0,memo);
       
    }
    int helper(vector<int>&arr,int target,int i,int sum,vector<vector<int>>&memo){
    if(i==arr.size())
    return (sum==target);
    if(memo[i][sum]!=-1)
    return memo[i][sum];
    int include=0;
    int exclude=helper(arr,target,i+1,sum,memo);
    if(arr[i]+sum<=target){
        include=helper(arr,target,i+1,sum+arr[i],memo);
    }
        return memo[i][sum]=include+exclude;
    }
    
