class Solution {
public:
    void solve(vector<vector<char>>& board) {
        queue<pair<int,int>>q;
        vector<int>distances={-1,0,1,0,-1};
        int r=board.size(),c=board[0].size();
        vector<vector<bool>>visited(r,vector<bool>(c));
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(board[i][j]=='X'){
                    visited[i][j]=true;
                }
                else if(board[i][j]=='O' &&(i==0||i==r-1 || j==0 ||j==c-1)){
                    q.push({i,j});
                    visited[i][j]=true;
                }
            }
        }
        while(!q.empty()){
            const auto [u,v]=q.front();
            q.pop();
            for(int k=0;k<4;k++){
                int m=u+distances[k],n=v+distances[k+1];
                if(m<0 || m>=r||n<0||n>=c){
                    continue;
                }
                if(visited[m][n])
                continue;
                visited[m][n]=true;
                q.push({m,n});
            }
        }
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(!visited[i][j]){
                    board[i][j]='X';
                }
            }
        }
       
    }
};
