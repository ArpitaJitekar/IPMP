//divid elis into twoparts reverse second half and merge one from one half one from second
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 struct ListNode *mid(struct ListNode *head){
    struct ListNode *s=head,*f=head;
    while(f && f->next){
        s=s->next;
        f=f->next->next
    }
    return s;
 }
 struct ListNode *reverse(struct ListNode *ptr){
    struct ListNode *a[25000];
    struct ListNode *ptr1=ptr;
    int i=0;
    while(ptr1!=NULL){
        a[i]=ptr1;
        ptr1=ptr1->next;
        i++;
    }
    for(int  j=i-1;j>0;j--){
        a[j]->next=a[j-1];
    }
    a[0]->next=NULL;
    return a[i-1];
 }
  void merge(struct ListNode* l1, struct ListNode* l2) {
     while (l1 && l2) {
        struct ListNode *l1Next = l1->next;
        struct ListNode *l2Next = l2->next;

        l1->next = l2;
        if (l1Next == NULL) break;

        l2->next = l1Next;

        l1 = l1Next;
        l2 = l2Next;
    }
     
     
  }

void reorderList(struct ListNode* head) {
    struct ListNode *ptr=head,*ptr1,*m;
     if (head == NULL || head->next == NULL|| head->next->next==NULL) return;
    m=mid(head);
     ptr1=reverse(m->next);
     m->next=NULL;
   merge(ptr,ptr1);

}
